import requests  # Biblioteca para realizar requisi√ß√µes HTTP de forma simples
import time      # Biblioteca para medir o tempo de execu√ß√£o (desempenho da requisi√ß√£o)

# ==========================
# CONFIGURA√á√ïES INICIAIS
# ==========================

# Endere√ßo IP do servidor que ir√° fornecer as imagens via protocolo HTTP
# Pode ser um IP local ou o IP virtual atribu√≠do via VPN (ex: Radmin VPN)
server_ip = "26.93.244.10"

# Montagem da URL base do servidor, utilizando a porta 8000 (padr√£o em muitos testes com servidores locais Python)
server_url = f"http://{server_ip}:8000"

# Lista simulada de imagens dispon√≠veis no servidor (nomes dos arquivos JPEG)
imagens_disponiveis = [f"img{i}.jpg" for i in range(1, 11)]

# Exibi√ß√£o no terminal das imagens dispon√≠veis para download
print("\nImagens dispon√≠veis no servidor:")
for img in imagens_disponiveis:
    print(f"- {img}")

# ==========================
# INTERA√á√ÉO COM O USU√ÅRIO
# ==========================

# Solicita√ß√£o de entrada do usu√°rio para escolher uma imagem para baixar
imagem_solicitada = input("\nDigite o nome da imagem que deseja baixar: ")

# ==========================
# ENVIO DA REQUISI√á√ÉO HTTP
# ==========================

# Captura do tempo de in√≠cio para medir o tempo total da opera√ß√£o de download
start_time = time.time()

# Envio de uma requisi√ß√£o HTTP GET para o servidor solicitando a imagem desejada
# A URL completa tem o formato: http://<ip>:8000/<nome_da_imagem>
resposta = requests.get(f"{server_url}/{imagem_solicitada}")

# C√°lculo da dura√ß√£o da requisi√ß√£o em segundos
duration = time.time() - start_time

# ==========================
# AN√ÅLISE DA RESPOSTA HTTP
# ==========================

# Se a resposta for bem-sucedida (HTTP 200 OK)
if resposta.status_code == 200:
    # C√°lculo do tamanho da imagem em kilobytes (KB)
    tamanho_kb = len(resposta.content) / 1024

    # C√°lculo da velocidade de download em KB/s
    velocidade = tamanho_kb / duration if duration > 0 else 0

    # Salvamento do conte√∫do da imagem recebida no disco (modo bin√°rio)
    with open(imagem_solicitada, "wb") as file:
        file.write(resposta.content)

    # Feedback para o usu√°rio com detalhes da transfer√™ncia
    print(f"\n‚úÖ {resposta.status_code} OK - Imagem '{imagem_solicitada}' baixada com sucesso!")
    print(f"üìÖ Tempo: {duration:.3f}s ‚Äî Tamanho: {tamanho_kb:.2f} KB ‚Äî Velocidade: {velocidade:.2f} KB/s")

# Caso o recurso (imagem) n√£o exista no servidor ‚Äî erro 404 Not Found
elif resposta.status_code == 404:
    print(f"\n‚ùå {resposta.status_code} Not Found - Imagem n√£o encontrada no servidor.")

# Caso ocorra um erro interno no servidor ‚Äî erros da faixa 5xx
elif resposta.status_code >= 500:
    print(f"\nüö® {resposta.status_code} Server Error - Problema no servidor.")

# Outros erros de cliente ‚Äî erros da faixa 4xx
elif resposta.status_code >= 400:
    print(f"\n‚ö†Ô∏è {resposta.status_code} Client Error - Requisi√ß√£o inv√°lida.")

# Caso retorne algum outro c√≥digo HTTP n√£o previsto explicitamente
else:
    print(f"\n‚ÑπÔ∏è {resposta.status_code} C√≥digo HTTP inesperado.")
